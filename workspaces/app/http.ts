/**
 * Supported HTTP methods.
 */
export enum HttpMethod {
  Get = "GET",
  Post = "POST",
  Put = "PUT",
  Delete = "DELETE",
  Patch = "PATCH",
  Options = "OPTIONS",
  Head = "HEAD",
}

/**
 * Supported redirect types.
 */
export enum RedirectType {
  Permanent,
  Temporary,
}

/**
 * Supported HTTP status codes.
 */
export enum StatusCode {
  Continue = 100,
  SwitchingProtocols = 101,
  Processing = 102,
  EarlyHints = 103,
  OK = 200,
  Created = 201,
  Accepted = 202,
  NonAuthoritativeInformation = 203,
  NoContent = 204,
  ResetContent = 205,
  PartialContent = 206,
  MultiStatus = 207,
  AlreadyReported = 208,
  IMUsed = 226,
  MultipleChoices = 300,
  MovedPermanently = 301,
  Found = 302,
  SeeOther = 303,
  NotModified = 304,
  UseProxy = 305,
  Unused = 306,
  TemporaryRedirect = 307,
  PermanentRedirect = 308,
  BadRequest = 400,
  Unauthorized = 401,
  PaymentRequired = 402,
  Forbidden = 403,
  NotFound = 404,
  MethodNotAllowed = 405,
  NotAcceptable = 406,
  ProxyAuthenticationRequired = 407,
  RequestTimeout = 408,
  Conflict = 409,
  Gone = 410,
  LengthRequired = 411,
  PreconditionFailed = 412,
  PayloadTooLarge = 413,
  URITooLong = 414,
  UnsupportedMediaType = 415,
  RangeNotSatisfiable = 416,
  ExpectationFailed = 417,
  ImATeapot = 418,
  MisdirectedRequest = 421,
  UnprocessableEntity = 422,
  Locked = 423,
  FailedDependency = 424,
  TooEarly = 425,
  UpgradeRequired = 426,
  PreconditionRequired = 428,
  TooManyRequests = 429,
  RequestHeaderFieldsTooLarge = 431,
  UnavailableForLegalReasons = 451,
  InternalServerError = 500,
  NotImplemented = 501,
  BadGateway = 502,
  ServiceUnavailable = 503,
  GatewayTimeout = 504,
  HTTPVersionNotSupported = 505,
  VariantAlsoNegotiates = 506,
  InsufficientStorage = 507,
  LoopDetected = 508,
  NotExtended = 510,
  NetworkAuthenticationRequired = 511,
}

/**
 * Default status text for each status code.
 */
export enum StatusText {
  Continue = "Continue",
  SwitchingProtocols = "Switching Protocols",
  Processing = "Processing",
  EarlyHints = "Early Hints",
  OK = "OK",
  Created = "Created",
  Accepted = "Accepted",
  NonAuthoritativeInformation = "Non-Authoritative Information",
  NoContent = "No Content",
  ResetContent = "Reset Content",
  PartialContent = "Partial Content",
  MultiStatus = "Multi-Status",
  AlreadyReported = "Already Reported",
  IMUsed = "IM Used",
  MultipleChoices = "Multiple Choices",
  MovedPermanently = "Moved Permanently",
  Found = "Found",
  SeeOther = "See Other",
  NotModified = "Not Modified",
  UseProxy = "Use Proxy",
  Unused = "(Unused)",
  TemporaryRedirect = "Temporary Redirect",
  PermanentRedirect = "Permanent Redirect",
  BadRequest = "Bad Request",
  Unauthorized = "Unauthorized",
  PaymentRequired = "Payment Required",
  Forbidden = "Forbidden",
  NotFound = "Not Found",
  MethodNotAllowed = "Method Not Allowed",
  NotAcceptable = "Not Acceptable",
  ProxyAuthenticationRequired = "Proxy Authentication Required",
  RequestTimeout = "Request Timeout",
  Conflict = "Conflict",
  Gone = "Gone",
  LengthRequired = "Length Required",
  PreconditionFailed = "Precondition Failed",
  PayloadTooLarge = "Payload Too Large",
  URITooLong = "URI Too Long",
  UnsupportedMediaType = "Unsupported Media Type",
  RangeNotSatisfiable = "Range Not Satisfiable",
  ExpectationFailed = "Expectation Failed",
  ImATeapot = "I'm a teapot",
  MisdirectedRequest = "Misdirected Request",
  UnprocessableEntity = "Unprocessable Entity",
  Locked = "Locked",
  FailedDependency = "Failed Dependency",
  TooEarly = "Too Early",
  UpgradeRequired = "Upgrade Required",
  PreconditionRequired = "Precondition Required",
  TooManyRequests = "Too Many Requests",
  RequestHeaderFieldsTooLarge = "Request Header Fields Too Large",
  UnavailableForLegalReasons = "Unavailable For Legal Reasons",
  InternalServerError = "Internal Server Error",
  NotImplemented = "Not Implemented",
  BadGateway = "Bad Gateway",
  ServiceUnavailable = "Service Unavailable",
  GatewayTimeout = "Gateway Timeout",
  HTTPVersionNotSupported = "HTTP Version Not Supported",
  VariantAlsoNegotiates = "Variant Also Negotiates",
  InsufficientStorage = "Insufficient Storage",
  LoopDetected = "Loop Detected",
  NotExtended = "Not Extended",
  NetworkAuthenticationRequired = "Network Authentication Required",
}

/**
 * Map of status codes to default status text.
 */
export const statusTextMap: Record<StatusCode, StatusText> = {
  [StatusCode.Continue]: StatusText.Continue,
  [StatusCode.SwitchingProtocols]: StatusText.SwitchingProtocols,
  [StatusCode.Processing]: StatusText.Processing,
  [StatusCode.EarlyHints]: StatusText.EarlyHints,
  [StatusCode.OK]: StatusText.OK,
  [StatusCode.Created]: StatusText.Created,
  [StatusCode.Accepted]: StatusText.Accepted,
  [StatusCode.NonAuthoritativeInformation]:
    StatusText.NonAuthoritativeInformation,
  [StatusCode.NoContent]: StatusText.NoContent,
  [StatusCode.ResetContent]: StatusText.ResetContent,
  [StatusCode.PartialContent]: StatusText.PartialContent,
  [StatusCode.MultiStatus]: StatusText.MultiStatus,
  [StatusCode.AlreadyReported]: StatusText.AlreadyReported,
  [StatusCode.IMUsed]: StatusText.IMUsed,
  [StatusCode.MultipleChoices]: StatusText.MultipleChoices,
  [StatusCode.MovedPermanently]: StatusText.MovedPermanently,
  [StatusCode.Found]: StatusText.Found,
  [StatusCode.SeeOther]: StatusText.SeeOther,
  [StatusCode.NotModified]: StatusText.NotModified,
  [StatusCode.UseProxy]: StatusText.UseProxy,
  [StatusCode.Unused]: StatusText.Unused,
  [StatusCode.TemporaryRedirect]: StatusText.TemporaryRedirect,
  [StatusCode.PermanentRedirect]: StatusText.PermanentRedirect,
  [StatusCode.BadRequest]: StatusText.BadRequest,
  [StatusCode.Unauthorized]: StatusText.Unauthorized,
  [StatusCode.PaymentRequired]: StatusText.PaymentRequired,
  [StatusCode.Forbidden]: StatusText.Forbidden,
  [StatusCode.NotFound]: StatusText.NotFound,
  [StatusCode.MethodNotAllowed]: StatusText.MethodNotAllowed,
  [StatusCode.NotAcceptable]: StatusText.NotAcceptable,
  [StatusCode.ProxyAuthenticationRequired]:
    StatusText.ProxyAuthenticationRequired,
  [StatusCode.RequestTimeout]: StatusText.RequestTimeout,
  [StatusCode.Conflict]: StatusText.Conflict,
  [StatusCode.Gone]: StatusText.Gone,
  [StatusCode.LengthRequired]: StatusText.LengthRequired,
  [StatusCode.PreconditionFailed]: StatusText.PreconditionFailed,
  [StatusCode.PayloadTooLarge]: StatusText.PayloadTooLarge,
  [StatusCode.URITooLong]: StatusText.URITooLong,
  [StatusCode.UnsupportedMediaType]: StatusText.UnsupportedMediaType,
  [StatusCode.RangeNotSatisfiable]: StatusText.RangeNotSatisfiable,
  [StatusCode.ExpectationFailed]: StatusText.ExpectationFailed,
  [StatusCode.ImATeapot]: StatusText.ImATeapot,
  [StatusCode.MisdirectedRequest]: StatusText.MisdirectedRequest,
  [StatusCode.UnprocessableEntity]: StatusText.UnprocessableEntity,
  [StatusCode.Locked]: StatusText.Locked,
  [StatusCode.FailedDependency]: StatusText.FailedDependency,
  [StatusCode.TooEarly]: StatusText.TooEarly,
  [StatusCode.UpgradeRequired]: StatusText.UpgradeRequired,
  [StatusCode.PreconditionRequired]: StatusText.PreconditionRequired,
  [StatusCode.TooManyRequests]: StatusText.TooManyRequests,
  [StatusCode.RequestHeaderFieldsTooLarge]:
    StatusText.RequestHeaderFieldsTooLarge,
  [StatusCode.UnavailableForLegalReasons]:
    StatusText.UnavailableForLegalReasons,
  [StatusCode.InternalServerError]: StatusText.InternalServerError,
  [StatusCode.NotImplemented]: StatusText.NotImplemented,
  [StatusCode.BadGateway]: StatusText.BadGateway,
  [StatusCode.ServiceUnavailable]: StatusText.ServiceUnavailable,
  [StatusCode.GatewayTimeout]: StatusText.GatewayTimeout,
  [StatusCode.HTTPVersionNotSupported]: StatusText.HTTPVersionNotSupported,
  [StatusCode.VariantAlsoNegotiates]: StatusText.VariantAlsoNegotiates,
  [StatusCode.InsufficientStorage]: StatusText.InsufficientStorage,
  [StatusCode.LoopDetected]: StatusText.LoopDetected,
  [StatusCode.NotExtended]: StatusText.NotExtended,
  [StatusCode.NetworkAuthenticationRequired]:
    StatusText.NetworkAuthenticationRequired,
};
